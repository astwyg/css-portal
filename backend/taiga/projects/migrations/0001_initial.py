# Generated by Django 2.2.17 on 2020-12-03 02:19

import django.contrib.postgres.fields
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taiga.base.db.models.fields.json
import taiga.base.utils.time
import taiga.projects.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EpicStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='slug')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('is_closed', models.BooleanField(blank=True, default=False, verbose_name='is closed')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
            ],
            options={
                'verbose_name': 'epic status',
                'verbose_name_plural': 'epic statuses',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='IssueDueDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('by_default', models.BooleanField(blank=True, default=False, verbose_name='by default')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('days_to_due', models.IntegerField(blank=True, default=None, null=True, verbose_name='days to due')),
            ],
            options={
                'verbose_name': 'issue due date',
                'verbose_name_plural': 'issue due dates',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='IssueStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='slug')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('is_closed', models.BooleanField(blank=True, default=False, verbose_name='is closed')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
            ],
            options={
                'verbose_name': 'issue status',
                'verbose_name_plural': 'issue statuses',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='IssueType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
            ],
            options={
                'verbose_name': 'issue type',
                'verbose_name_plural': 'issue types',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, default=None, max_length=255, null=True, verbose_name='email')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='create at')),
                ('token', models.CharField(blank=True, default=None, max_length=60, null=True, verbose_name='token')),
                ('invitation_extra_text', models.TextField(blank=True, null=True, verbose_name='invitation extra text')),
                ('user_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='user order')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'ordering': ['project', 'user__full_name', 'user__username', 'user__email', 'email'],
            },
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('value', models.FloatField(blank=True, default=None, null=True, verbose_name='value')),
            ],
            options={
                'verbose_name': 'points',
                'verbose_name_plural': 'points',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
            ],
            options={
                'verbose_name': 'priority',
                'verbose_name_plural': 'priorities',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, null=True, size=None, verbose_name='tags')),
                ('tags_colors', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=2), blank=True, default=list, null=True, size=None, verbose_name='tags colors')),
                ('name', models.CharField(max_length=250, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('logo', models.FileField(blank=True, max_length=500, null=True, upload_to=taiga.projects.models.get_project_logo_file_path, verbose_name='logo')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(verbose_name='modified date')),
                ('total_milestones', models.IntegerField(blank=True, null=True, verbose_name='total of milestones')),
                ('total_story_points', models.FloatField(blank=True, null=True, verbose_name='total story points')),
                ('is_contact_activated', models.BooleanField(blank=True, default=True, verbose_name='active contact')),
                ('is_epics_activated', models.BooleanField(blank=True, default=False, verbose_name='active epics panel')),
                ('is_backlog_activated', models.BooleanField(blank=True, default=True, verbose_name='active backlog panel')),
                ('is_kanban_activated', models.BooleanField(blank=True, default=False, verbose_name='active kanban panel')),
                ('is_wiki_activated', models.BooleanField(blank=True, default=True, verbose_name='active wiki panel')),
                ('is_issues_activated', models.BooleanField(blank=True, default=True, verbose_name='active issues panel')),
                ('videoconferences', models.CharField(blank=True, choices=[('whereby-com', 'Whereby.com'), ('jitsi', 'Jitsi'), ('custom', 'Custom'), ('talky', 'Talky')], max_length=250, null=True, verbose_name='videoconference system')),
                ('videoconferences_extra_data', models.CharField(blank=True, max_length=250, null=True, verbose_name='videoconference extra data')),
                ('is_private', models.BooleanField(blank=True, default=True, verbose_name='is private')),
                ('anon_permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(choices=[('view_project', 'View project'), ('view_milestones', 'View milestones'), ('view_epics', 'View epic'), ('view_us', 'View user stories'), ('view_tasks', 'View tasks'), ('view_issues', 'View issues'), ('view_wiki_pages', 'View wiki pages'), ('view_wiki_links', 'View wiki links')]), blank=True, default=list, null=True, size=None, verbose_name='anonymous permissions')),
                ('public_permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(choices=[('view_project', 'View project'), ('view_milestones', 'View milestones'), ('add_milestone', 'Add milestone'), ('modify_milestone', 'Modify milestone'), ('delete_milestone', 'Delete milestone'), ('view_epics', 'View epic'), ('add_epic', 'Add epic'), ('modify_epic', 'Modify epic'), ('comment_epic', 'Comment epic'), ('delete_epic', 'Delete epic'), ('view_us', 'View user story'), ('add_us', 'Add user story'), ('modify_us', 'Modify user story'), ('comment_us', 'Comment user story'), ('delete_us', 'Delete user story'), ('view_tasks', 'View tasks'), ('add_task', 'Add task'), ('modify_task', 'Modify task'), ('comment_task', 'Comment task'), ('delete_task', 'Delete task'), ('view_issues', 'View issues'), ('add_issue', 'Add issue'), ('modify_issue', 'Modify issue'), ('comment_issue', 'Comment issue'), ('delete_issue', 'Delete issue'), ('view_wiki_pages', 'View wiki pages'), ('add_wiki_page', 'Add wiki page'), ('modify_wiki_page', 'Modify wiki page'), ('comment_wiki_page', 'Comment wiki page'), ('delete_wiki_page', 'Delete wiki page'), ('view_wiki_links', 'View wiki links'), ('add_wiki_link', 'Add wiki link'), ('modify_wiki_link', 'Modify wiki link'), ('delete_wiki_link', 'Delete wiki link')]), blank=True, default=list, null=True, size=None, verbose_name='user permissions')),
                ('is_featured', models.BooleanField(blank=True, default=False, verbose_name='is featured')),
                ('is_looking_for_people', models.BooleanField(blank=True, default=False, verbose_name='is looking for people')),
                ('looking_for_people_note', models.TextField(blank=True, default='', verbose_name='looking for people note')),
                ('epics_csv_uuid', models.CharField(blank=True, db_index=True, default=None, editable=False, max_length=32, null=True)),
                ('userstories_csv_uuid', models.CharField(blank=True, db_index=True, default=None, editable=False, max_length=32, null=True)),
                ('tasks_csv_uuid', models.CharField(blank=True, db_index=True, default=None, editable=False, max_length=32, null=True)),
                ('issues_csv_uuid', models.CharField(blank=True, db_index=True, default=None, editable=False, max_length=32, null=True)),
                ('transfer_token', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='project transfer token')),
                ('blocked_code', models.CharField(blank=True, choices=[('blocked-by-nonpayment', 'This project is blocked due to payment failure'), ('blocked-by-staff', 'This project is blocked by admin staff'), ('blocked-by-owner-leaving', 'This project is blocked because the owner left'), ('blocked-by-deleting', "This project is blocked while it's deleted")], default=None, max_length=255, null=True, verbose_name='blocked code')),
                ('totals_updated_datetime', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='updated date time')),
                ('total_fans', models.PositiveIntegerField(db_index=True, default=0, verbose_name='count')),
                ('total_fans_last_week', models.PositiveIntegerField(db_index=True, default=0, verbose_name='fans last week')),
                ('total_fans_last_month', models.PositiveIntegerField(db_index=True, default=0, verbose_name='fans last month')),
                ('total_fans_last_year', models.PositiveIntegerField(db_index=True, default=0, verbose_name='fans last year')),
                ('total_activity', models.PositiveIntegerField(db_index=True, default=0, verbose_name='count')),
                ('total_activity_last_week', models.PositiveIntegerField(db_index=True, default=0, verbose_name='activity last week')),
                ('total_activity_last_month', models.PositiveIntegerField(db_index=True, default=0, verbose_name='activity last month')),
                ('total_activity_last_year', models.PositiveIntegerField(db_index=True, default=0, verbose_name='activity last year')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
                'ordering': ['name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, null=True, size=None, verbose_name='tags')),
                ('tags_colors', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=2), blank=True, default=list, null=True, size=None, verbose_name='tags colors')),
                ('name', models.CharField(max_length=250, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='user order')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(verbose_name='modified date')),
                ('default_owner_role', models.CharField(max_length=50, verbose_name="default owner's role")),
                ('is_contact_activated', models.BooleanField(blank=True, default=True, verbose_name='active contact')),
                ('is_epics_activated', models.BooleanField(blank=True, default=False, verbose_name='active epics panel')),
                ('is_backlog_activated', models.BooleanField(blank=True, default=True, verbose_name='active backlog panel')),
                ('is_kanban_activated', models.BooleanField(blank=True, default=False, verbose_name='active kanban panel')),
                ('is_wiki_activated', models.BooleanField(blank=True, default=True, verbose_name='active wiki panel')),
                ('is_issues_activated', models.BooleanField(blank=True, default=True, verbose_name='active issues panel')),
                ('is_looking_for_people', models.BooleanField(blank=True, default=False, verbose_name='is looking for people')),
                ('looking_for_people_note', models.TextField(blank=True, default='', verbose_name='looking for people note')),
                ('videoconferences', models.CharField(blank=True, choices=[('whereby-com', 'Whereby.com'), ('jitsi', 'Jitsi'), ('custom', 'Custom'), ('talky', 'Talky')], max_length=250, null=True, verbose_name='videoconference system')),
                ('videoconferences_extra_data', models.CharField(blank=True, max_length=250, null=True, verbose_name='videoconference extra data')),
                ('default_options', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='default options')),
                ('epic_statuses', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='epic statuses')),
                ('us_statuses', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='us statuses')),
                ('us_duedates', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='us duedates')),
                ('points', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='points')),
                ('task_statuses', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='task statuses')),
                ('task_duedates', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='task duedates')),
                ('issue_statuses', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='issue statuses')),
                ('issue_types', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='issue types')),
                ('issue_duedates', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='issue duedates')),
                ('priorities', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='priorities')),
                ('severities', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='severities')),
                ('roles', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='roles')),
                ('epic_custom_attributes', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='epic custom attributes')),
                ('us_custom_attributes', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='us custom attributes')),
                ('task_custom_attributes', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='task custom attributes')),
                ('issue_custom_attributes', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='issue custom attributes')),
            ],
            options={
                'verbose_name': 'project template',
                'verbose_name_plural': 'project templates',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserStoryStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='slug')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('is_closed', models.BooleanField(blank=True, default=False, verbose_name='is closed')),
                ('is_archived', models.BooleanField(blank=True, default=False, verbose_name='is archived')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('wip_limit', models.IntegerField(blank=True, default=None, null=True, verbose_name='work in progress limit')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='us_statuses', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'user story status',
                'verbose_name_plural': 'user story statuses',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserStoryDueDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('by_default', models.BooleanField(blank=True, default=False, verbose_name='by default')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('days_to_due', models.IntegerField(blank=True, default=None, null=True, verbose_name='days to due')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='us_duedates', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'user story due date',
                'verbose_name_plural': 'user story due dates',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='slug')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('is_closed', models.BooleanField(blank=True, default=False, verbose_name='is closed')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_statuses', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'task status',
                'verbose_name_plural': 'task statuses',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskDueDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('by_default', models.BooleanField(blank=True, default=False, verbose_name='by default')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('days_to_due', models.IntegerField(blank=True, default=None, null=True, verbose_name='days to due')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_duedates', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'task due date',
                'verbose_name_plural': 'task due dates',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Severity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.IntegerField(default=10, verbose_name='order')),
                ('color', models.CharField(default='#999999', max_length=20, verbose_name='color')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='severities', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'severity',
                'verbose_name_plural': 'severities',
                'ordering': ['project', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectModulesConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config', taiga.base.db.models.fields.json.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='modules config')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='modules_config', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'project modules config',
                'verbose_name_plural': 'project modules configs',
                'ordering': ['project'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='creation_template',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='projects.ProjectTemplate', verbose_name='creation template'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_epic_status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.EpicStatus', verbose_name='default epic status'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_issue_status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.IssueStatus', verbose_name='default issue status'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_issue_type',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.IssueType', verbose_name='default issue type'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_points',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.Points', verbose_name='default points'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_priority',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.Priority', verbose_name='default priority'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_severity',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.Severity', verbose_name='default severity'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_task_status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.TaskStatus', verbose_name='default task status'),
        ),
        migrations.AddField(
            model_name='project',
            name='default_us_status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='projects.UserStoryStatus', verbose_name='default US status'),
        ),
    ]
