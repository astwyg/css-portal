# Generated by Django 2.2.17 on 2020-12-03 02:19

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields
import taiga.base.utils.time
import taiga.projects.notifications.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('issues', '0002_auto_20201203_1019'),
        ('projects', '0002_auto_20201203_1019'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.TAIGA_USER_MODEL),
        ('milestones', '0002_auto_20201203_1019'),
        ('tasks', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RolePoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_points', to='projects.Points', verbose_name='points')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_points', to='users.Role', verbose_name='role')),
            ],
            options={
                'verbose_name': 'role points',
                'verbose_name_plural': 'role points',
                'ordering': ['user_story', 'role'],
            },
        ),
        migrations.CreateModel(
            name='UserStory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(default=1, verbose_name='version')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, null=True, size=None, verbose_name='tags')),
                ('is_blocked', models.BooleanField(blank=True, default=False, verbose_name='is blocked')),
                ('blocked_note', models.TextField(blank=True, default='', verbose_name='blocked note')),
                ('due_date', models.DateField(blank=True, default=None, null=True, verbose_name='due date')),
                ('due_date_reason', models.TextField(blank=True, default='', verbose_name='reason for the due date')),
                ('ref', models.BigIntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='ref')),
                ('is_closed', models.BooleanField(default=False)),
                ('backlog_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='backlog order')),
                ('sprint_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='sprint order')),
                ('kanban_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='kanban order')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(verbose_name='modified date')),
                ('finish_date', models.DateTimeField(blank=True, null=True, verbose_name='finish date')),
                ('subject', models.TextField(verbose_name='subject')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('client_requirement', models.BooleanField(blank=True, default=False, verbose_name='is client requirement')),
                ('team_requirement', models.BooleanField(blank=True, default=False, verbose_name='is team requirement')),
                ('from_task_ref', models.TextField(blank=True, null=True, verbose_name='reference from task')),
                ('external_reference', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=None, null=True, size=None, verbose_name='external reference')),
                ('tribe_gig', picklefield.fields.PickledObjectField(blank=True, default=None, editable=False, null=True, verbose_name='taiga tribe gig')),
                ('assigned_to', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userstories_assigned_to_me', to=settings.TAIGA_USER_MODEL, verbose_name='assigned to')),
                ('assigned_users', models.ManyToManyField(blank=True, default=None, related_name='assigned_userstories', to=settings.TAIGA_USER_MODEL, verbose_name='assigned users')),
                ('generated_from_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_user_stories', to='issues.Issue', verbose_name='generated from issue')),
                ('generated_from_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_user_stories', to='tasks.Task', verbose_name='generated from task')),
                ('milestone', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_stories', to='milestones.Milestone', verbose_name='milestone')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_user_stories', to=settings.TAIGA_USER_MODEL, verbose_name='owner')),
                ('points', models.ManyToManyField(related_name='userstories', through='userstories.RolePoints', to='projects.Points', verbose_name='points')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_stories', to='projects.Project', verbose_name='project')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_stories', to='projects.UserStoryStatus', verbose_name='status')),
            ],
            options={
                'verbose_name': 'user story',
                'verbose_name_plural': 'user stories',
                'ordering': ['project', 'backlog_order', 'ref'],
            },
            bases=(taiga.projects.notifications.mixins.WatchedModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='rolepoints',
            name='user_story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_points', to='userstories.UserStory', verbose_name='user story'),
        ),
        migrations.AlterUniqueTogether(
            name='rolepoints',
            unique_together={('user_story', 'role')},
        ),
    ]
